/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guis;

import daos.RegistrationDAO;
import dtos.RegistrationDTO;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import services.RegistrationInterface;

/**
 *
 * @author TanNV
 */
public class ClientManagement extends javax.swing.JFrame {

    String fileName = "RegistrationData.txt";
    String serviceName = "rmi://localhost:1098/RegistrationServerImpl";
    RegistrationInterface regInterface;
    RegistrationDAO dao = null;
    PetModel model = null;
    boolean addNew = true;

    /**
     * Creates new form ClientManagement
     */
    public ClientManagement() throws RemoteException, NotBoundException, MalformedURLException {
        initComponents();
        setLocationRelativeTo(null);
        model = new PetModel();
        dao = new RegistrationDAO();
        setModel();
        setEmpty();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegis = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnGetAll = new javax.swing.JButton();
        btnSearchName = new javax.swing.JButton();
        boxSortName = new javax.swing.JComboBox<>();
        txtSearchName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtRegisID = new javax.swing.JTextField();
        txtFullName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        rdMale = new javax.swing.JRadioButton();
        rdFemale = new javax.swing.JRadioButton();
        btnSearchID = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtNumberOfPet = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSymptoms = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Main part : "));

        tblRegis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        tblRegis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegisMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRegis);

        jLabel2.setText("Sort by name  :");

        btnGetAll.setText("Gett all data");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        btnSearchName.setText("Search by name");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        boxSortName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "A - Z", "Z - A" }));
        boxSortName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSortNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchName)
                            .addComponent(boxSortName, 0, 158, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSearchName, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                            .addComponent(btnGetAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(29, 29, 29)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGetAll)
                        .addComponent(boxSortName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearchName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearchName))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Detail part :"));

        jLabel3.setText("Registration ID :");

        jLabel4.setText("Full name :");

        jLabel5.setText("Age :");

        jLabel6.setText("Email :");

        jLabel7.setText("Phone :");

        jLabel8.setText("Address :");

        jLabel9.setText("Number of pet :");

        jLabel10.setText("Symptoms :");

        btnAddNew.setText("Add new");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel11.setText("Gender :");

        rdMale.setText("Male");

        rdFemale.setText("Female");

        btnSearchID.setText("Search");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane2.setViewportView(txtAddress);

        txtSymptoms.setColumns(20);
        txtSymptoms.setRows(5);
        jScrollPane3.setViewportView(txtSymptoms);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtAge)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(rdMale)
                                .addGap(18, 18, 18)
                                .addComponent(rdFemale))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtRegisID, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchID, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                            .addComponent(txtFullName)
                            .addComponent(txtEmail)
                            .addComponent(txtPhone)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtNumberOfPet, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtRegisID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchID)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel11)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdMale)
                    .addComponent(rdFemale))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtNumberOfPet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(btnSave)
                    .addComponent(btnDelete))
                .addGap(45, 45, 45))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pet Healthcare Management");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        // TODO add your handling code here:
        try {
            connectServer();
            loadData();
            tblRegis.updateUI();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnGetAllActionPerformed

    private void tblRegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegisMouseClicked
        // TODO add your handling code here:
        int indexSelected = tblRegis.getSelectedRow();
        if (indexSelected < 0) {
            return;
        }
        String id = model.getData().get(indexSelected).getRegistrationID();
        try {
            RegistrationDTO dto = regInterface.findByRegistrationID(id);
            showRegis(dto);

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_tblRegisMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!validRegis()) {
            return;
        }
        String id = txtRegisID.getText();
        String fullName = txtFullName.getText();
        int age = Integer.parseInt(txtAge.getText());
        boolean gender = true;
        if (rdFemale.isSelected()) {
            gender = false;
        }
        String email = txtEmail.getText();
        String phone = txtPhone.getText();
        String address = txtAddress.getText();
        int numberOfPet = Integer.parseInt(txtNumberOfPet.getText());
        String symtoms = txtSymptoms.getText();
        RegistrationDTO dto = new RegistrationDTO(id, fullName, email, phone, address, symtoms, age, numberOfPet, gender);
        try {
            if (addNew == true) { // add new regis
                regInterface.createRegistration(dto);
                JOptionPane.showMessageDialog(this, "Insert new registration success");
            } else {
                regInterface.updateRegistration(dto);
                JOptionPane.showMessageDialog(this, "Update regsitration success");
            }
            model.setData(regInterface.findAllRegistration());
            tblRegis.updateUI();
            setEmpty();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        // TODO add your handling code here:
        setEmpty();
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int indexSelected = tblRegis.getSelectedRow();
        if (indexSelected < 0) {
            return;
        }
        try {
            int option = JOptionPane.showConfirmDialog(this, "Are you sure to delete !!");
            if (option == JOptionPane.OK_OPTION) {
                String id = model.getData().get(indexSelected).getRegistrationID();
                regInterface.removeRegistration(id);
                loadData();
                tblRegis.updateUI();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Delete is error");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        // TODO add your handling code here:
        String id = txtRegisID.getText().trim();
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID field is not null");
        }
        try {
            RegistrationDTO dto = regInterface.findByRegistrationID(id);
            if (dto == null) {
                JOptionPane.showMessageDialog(this, "Cannot find ID");
            } else {
                showRegis(dto);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
        String name = txtSearchName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Search name is not null");
            return;
        }
        try {
            searchName(name);
            if (model.getData().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Cannot find the name");
            }
            tblRegis.updateUI();
            txtSearchName.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Search name error");
        }
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void boxSortNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSortNameActionPerformed
        // TODO add your handling code here:
        if (model.getData().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Data is null, cannot sort");
            return;
        }
        try {
            int sortSelect = boxSortName.getSelectedIndex();
            if (sortSelect == 0) {
                loadData();
            }else{
                model.sort(sortSelect);
            }
            tblRegis.updateUI();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_boxSortNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    try {
                        new ClientManagement().setVisible(true);
                    } catch (NotBoundException ex) {
                        Logger.getLogger(ClientManagement.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(ClientManagement.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(ClientManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxSortName;
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rdFemale;
    private javax.swing.JRadioButton rdMale;
    private javax.swing.JTable tblRegis;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNumberOfPet;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegisID;
    private javax.swing.JTextField txtSearchName;
    private javax.swing.JTextArea txtSymptoms;
    // End of variables declaration//GEN-END:variables

    private void setModel() {
        genderGroup.add(rdMale);
        genderGroup.add(rdFemale);
        tblRegis.setModel(model);
    }

    private void loadData() throws RemoteException {
        model.setData(regInterface.findAllRegistration());
    }

    private void connectServer() throws NotBoundException, MalformedURLException, RemoteException {
        try {
            regInterface = (RegistrationInterface) Naming.lookup(serviceName);

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Cannot connect with server");
            System.exit(0);
        }
    }

    public void setEmpty() {
        txtRegisID.setText("");
        txtRegisID.setEditable(true);
        txtRegisID.requestFocus();

        addNew = true;
        txtFullName.setText("");
        txtAge.setText("");
        rdMale.setSelected(true);
        txtEmail.setText("");
        txtPhone.setText("");
        txtAddress.setText("");
        txtNumberOfPet.setText("");
        txtSymptoms.setText("");
    }

    private void showRegis(RegistrationDTO dto) {
        txtRegisID.setText(dto.getRegistrationID());
        txtRegisID.setEditable(false);
        addNew = false;
        btnSearchID.setEnabled(false);

        txtAddress.setText(dto.getAddress());
        txtAge.setText(dto.getAge() + "");
        txtEmail.setText(dto.getEmail());
        txtFullName.setText(dto.getFullName());
        txtNumberOfPet.setText(dto.getNumberOfPet() + "");
        txtPhone.setText(dto.getPhone());
        txtSymptoms.setText(dto.getSymptoms());

        if (dto.isGender()) {
            rdMale.setSelected(true);
        } else {
            rdFemale.setSelected(true);
        }
    }

    private boolean validRegis() {
        if (addNew == true) { // add new regis
            String id = txtRegisID.getText().trim();
            if (!id.matches("[a-zA-Z0-9]{2,10}")) {
                JOptionPane.showMessageDialog(null, "Registration ID is 2 - 10 character, not contains special characters");

                return false;
            }
        }

        String fullName = txtFullName.getText();
        if (!fullName.matches("[a-zA-Z0-9]{2,50}")) {
            JOptionPane.showMessageDialog(null, "Name length must 2 - 50 characters");

            return false;
        }
        // age
        try {
            int age = Integer.parseInt(txtAge.getText());
            if (age < 1) {
                JOptionPane.showMessageDialog(null, "Age must be > 0");
                txtAge.requestFocus();
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Age is not correct format");
            txtAge.requestFocus();
            return false;
        }

        String email = txtEmail.getText();
        if (!email.matches("[a-zA-Z0-9]+@{1}+[a-zA-Z0-9]{2,30}")) {
            JOptionPane.showMessageDialog(null, "Email is empty or not correct format");
            txtEmail.requestFocus();
            return false;
        }
        String phone = txtPhone.getText();
        if (!phone.matches("[0-9]{2,15}")) {
            JOptionPane.showMessageDialog(null, "Number phone is empty or number phone length > 15");
            txtPhone.requestFocus();
            return false;
        }
        String address = txtAddress.getText();
        if (address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Address not null");
            txtAddress.requestFocus();
            return false;
        }

        try {
            int pet = Integer.parseInt(txtNumberOfPet.getText());
            if (pet < 0) {
                JOptionPane.showMessageDialog(this, "Positive number is required");
                return false;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Number of pet positive number is required");
            return false;
        }

        String systoms = txtSymptoms.getText();
        if (systoms.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Systoms not null");
            txtSymptoms.requestFocus();
            return false;
        }
        return true;
    }
    
    private void searchName(String name) throws RemoteException{
        ArrayList<RegistrationDTO> list = regInterface.findAllRegistration();
        ArrayList<RegistrationDTO> result = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getFullName().equalsIgnoreCase(name)) {
                result.add(list.get(i));
            }
        }
        model.setData(result);
    }

}
